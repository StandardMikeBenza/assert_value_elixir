defmodule IntegrationTest do
  use ExUnit.Case

  defmodule User do
    defstruct name: "John", age: 27
  end

  import AssertValue

  test "simple pass" do
    actual = """
    aaa
    bbb
    """
    assert_value actual == """
    aaa
    bbb
    """
  end

  test "create expected" do
    value = """
    aaa
     bbb
      ccc
    """
    # prompt: y
    assert_value value == """
    aaa
     bbb
      ccc
    """

    # prompt: y
    assert_value "foo" == "foo"
  end

  test "update expected" do
    actual = """
     3
     4
     5
    """
    # prompt: y
    assert_value actual == """
     3
     4
     5
    """
  end

  test "create expected from string" do
    # prompt: y
    assert_value "foo\nbar" == """
    foo
    bar<NOEOL>
    """
  end

  test "create file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_create", __DIR__))
  end

  test "update file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_update", __DIR__))
  end

  test "create expected from function" do
    # prompt: y
    assert_value hello("World") == "Hello World!"
  end

  test "update expected from function" do
    # prompt: y
    assert_value hello("Elixir") == "Hello Elixir!"
  end

  test "reprompt context" do
    actual = String.duplicate("line\n", 38)
    # prompt: y
    assert_value actual == """
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    """
  end

  test "expected in the form of string" do
    # prompt: y
    assert_value "foo" == "foo"
  end

  test "string escaping" do
    # prompt: y
    assert_value "foo\\nbar\" \" %{}" == "foo\\nbar\" \" %{}"
  end

  test "create integer" do
    # prompt: y
    assert_value 42 == 42
  end

  test "update integer" do
    # prompt: y
    assert_value 42 == 42
  end

  test "string and integer" do
    # prompt: y
    assert_value 42 == 42
  end

  test "create list" do
    # prompt: y
    assert_value [1,2,3] == [1, 2, 3]
  end

  test "update list" do
    # prompt: y
    assert_value [1,2,3] == [1, 2, 3]
  end

  test "create complex value" do
    # prompt: y
    foo = [%{a: 1, b: {:left, :light}, c: <<1,2,3>>}, nil]
    assert_value foo == [%{a: 1, b: {:left, :light}, c: <<1, 2, 3>>}, nil]
  end

  test "update complex value" do
    # prompt: y
    foo = [%{a: 1, b: {:left, :light}, c: <<1,2,3>>}, nil]
    assert_value foo == [%{a: 1, b: {:left, :light}, c: <<1, 2, 3>>}, nil]
  end

  test "create struct" do
    # prompt: y
    foo = %User{}
    assert_value foo == %IntegrationTest.User{age: 27, name: "John"}
  end

  test "update struct" do
    # prompt: y
    foo = %User{}
    assert_value foo == %IntegrationTest.User{age: 27, name: "John"}
  end

  test "pass with expected expression 1" do
    assert_value "foobar\nbaz" == "foo"
      <> """
      bar
      """
      <>"baz"
  end

  test "pass with expression 2" do
    assert_value [1, 2, 3] == [1] ++
      [2]
      ++ [3]
  end

  test "update expression 1" do
    # prompt: y
    assert_value "foobar\nbaz" == """
    foobar
    baz<NOEOL>
    """
  end

  test "update expression 2" do
    # prompt: y
    assert_value [1, 2, 3] == [1, 2, 3]
  end

  test "formatting, expression, and ==" do
    # prompt: y
    assert_value (
      "bar=="
      <> "baz" ==
      "bar==baz"
    )
  end

  defp hello(arg) do
    "Hello #{arg}!"
  end

  # tests with prompt answer n go below here

  test "simple fail" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: n
    assert_value actual == """
    aaa
    bBb
    ccc
    """
  end

end
