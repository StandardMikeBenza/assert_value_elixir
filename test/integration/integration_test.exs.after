defmodule IntegrationTest do
  use ExUnit.Case

  import AssertValue

  test "simple pass" do
    actual = """
    aaa
    bbb
    """
    assert_value actual == """
    aaa
    bbb
    """
  end

  test "create expected" do
    value = """
    aaa
     bbb
      ccc
    """
    # prompt: y
    assert_value value == """
    aaa
     bbb
      ccc
    """

    # prompt: y
    assert_value "foo" == """
    foo<NOEOL>
    """
  end

  test "update expected" do
    actual = """
     3
     4
     5
    """
    # prompt: y
    assert_value actual == """
     3
     4
     5
    """
  end

  test "create expected from string" do
    # prompt: y
    assert_value "foo\nbar" == """
    foo
    bar<NOEOL>
    """
  end

  test "create file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_create", __DIR__))
  end

  test "update file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_update", __DIR__))
  end

  test "create expected from function" do
    # prompt: y
    assert_value hello("World") == """
    Hello World!<NOEOL>
    """
  end

  test "update expected from function" do
    # prompt: y
    assert_value hello("Elixir") == """
    Hello Elixir!<NOEOL>
    """
  end

  test "reprompt context" do
    actual = String.duplicate("line\n", 38)
    # prompt: y
    assert_value actual == """
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    line
    """
  end

  test "bad expected in the form of string" do
    # prompt: y
    assert_value "foo" == "bar"
  end

  defp hello(arg) do
    "Hello #{arg}!"
  end

  # tests with prompt answer n go below here

  test "simple fail" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: n
    assert_value actual == """
    aaa
    bBb
    ccc
    """
  end

end
