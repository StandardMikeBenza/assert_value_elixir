defmodule ParserTest do
  use ExUnit.Case

  import AssertValue

  test "newlines" do
    assert_value "foo" ==
    "foo"
    # prompt: y
    assert_value "foo" ==
    "foo"

    assert_value "foo"
    == "foo"
    # prompt: y
    assert_value "foo"
    == "foo"
  end

  test "parens" do
    assert_value("foo" == "foo")
    # prompt: y
    assert_value("foo" == "foo")

    assert_value(
    "foo" == "foo"
    )
    # prompt: y
    assert_value(
    "foo" == "foo"
    )

    assert_value(
    "foo"
    ==
    "foo"
    )
    # prompt: y
    assert_value(
    "foo"
    ==
    "foo"
    )
  end

  test "elixir 1.6 formatter" do
    assert_value(
      "foo\nbar" == """
      foo
      bar<NOEOL>
      """
    )

    # prompt: y
    assert_value(
      "foo\nbar" == """
    foo
    bar<NOEOL>
    """
    )
  end

  test "expressions" do
    # prompt: y
    assert_value (
      "bar=="
      <> "baz" ==
      "bar==baz"
    )
  end

  test "more parens" do
    # prompt: y
    assert_value (1 + 2) == 3

    # prompt: y
    assert_value(
      ("foo" <> "bar"
      <> "baz")
      ==
      "foobarbaz"
    )

    # prompt: y
    assert_value(
      (("foo" <> "\nbar")
      <> "\n"
      <> "baz")
      ==
      """
    foo
    bar
    baz<NOEOL>
    """
    )
  end

  test "multiple parens" do
    # prompt: y
    assert_value ((((1 + 2)) == 3))
  end

  test "create with parens" do
    # prompt: y
    assert_value (1 + 2 == 3)

    # prompt: y
    assert_value ((1 + 2 == 3))

    # prompt: y
    assert_value (((1 + 2 == 3)))

    # prompt: y
    assert_value(
      ("foo" <> "bar"
      <> "baz" == "foobarbaz")
    )

    # prompt: y
    assert_value(
      (("foo" <> "\nbar")
      <> "\n"
      <> "baz" == """
    foo
    bar
    baz<NOEOL>
    """)
    )
  end

end
