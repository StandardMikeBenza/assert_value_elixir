.
matrix_expression_test.exs:##:"test newlines in operator (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test newlines in operator (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test newlines in operator (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] ..
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple parens (not equal)" assert_value "foo" == "bar" failed

-bar
+foo

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test simple function" assert_value hello("World") failed

-
+Hello World!

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple function" assert_value hello("Elixir") == "Hello World!" failed

-Hello World!
+Hello Elixir!

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test simple function" assert_value hello("Elixir\nHello AssertValue!") == "... failed

-Hello World!
+Hello Elixir
+Hello AssertValue!!

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test simple function in expected" assert_value hello("World") == hello("Elixir") failed

-Hello Elixir!
+Hello World!

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "bar" failed

-
+foobar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "\n" <> "bar" failed

-
+foo
+bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "\n" <> "bar" failed

-
+foo
+bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value Kernel.<>("foo", "\n") |> Kernel.<>("bar... failed

-
+foo
+bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value to_string(:foo) |> Kernel.<>("foo") |> K... failed

-
+foofoobar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "bar" == "foo\nbar\n" failed

-foo
-bar
+foobar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "\n" <> "bar" == "foo\nbaz\n" failed

 foo
-baz
+bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value "foo" <> "\n" <> "bar" == "foo\nbar\n" failed

 foo
 bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value Kernel.<>("foo", "\n") |> Kernel.<>("bar... failed

-foobar
+foo
+bar

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test string concatenation in actual" assert_value to_string(:foo) |> Kernel.<>("foo") |> K... failed

-foobar
+foofoobar

Accept new value? [y,n,?] ..
matrix_expression_test.exs:##:"test array concatenation in actual" assert_value [1] ++ [2, 3] failed

-
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in actual" assert_value [1 | [2, 3]] failed

-
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in actual" assert_value [1] ++ [2] ++ [3] failed

-
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in actual" assert_value [1] |> Kernel.++([2]) |> Kernel.++([3]) failed

-
+[1, 2, 3]

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test array concatenation in expected" assert_value [1, 2, 3] == [1] ++ [2, 4] failed

-[1, 2, 4]
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in expected" assert_value [1, 2, 3] == [1 | [2, 4]] failed

-[1, 2, 4]
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in expected" assert_value [1, 2, 3] == [1] ++ [2] ++ [4] failed

-[1, 2, 4]
+[1, 2, 3]

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test array concatenation in expected" assert_value [1, 2, 3] == [1] |> Kernel.++([2]) |> Ke... failed

-[1, 2, 4]
+[1, 2, 3]

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test elixir 1.6 default formatter" assert_value "foo\nbar" == "foo\nbaz\n" failed

 foo
-baz
+bar

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test parens in actual" assert_value 1 + 2 failed

-
+3

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value 1 + 2 failed

-
+3

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value 1 + 2 failed

-
+3

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value "foo" <> "bar" <> "baz" failed

-
+foobarbaz

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value ("foo" <> "\nbar") <> "\n" <> "baz" failed

-
+foo
+bar
+baz

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value 1 + 2 == 4 failed

-4
+3

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value "foo" <> "bar" <> "baz" == "foo" failed

-foo
+foobarbaz

Accept new value? [y,n,?] 
matrix_expression_test.exs:##:"test parens in actual" assert_value ("foo" <> "\nbar") <> "\n" <> "baz" == "... failed

 foo
+bar
+baz

Accept new value? [y,n,?] .
matrix_expression_test.exs:##:"test multiple parens" assert_value 1 + 2 == 4 failed

-4
+3

Accept new value? [y,n,?] .
13 tests, 0 failures
