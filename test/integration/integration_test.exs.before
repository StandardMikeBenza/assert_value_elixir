defmodule IntegrationTest do
  use ExUnit.Case

  import AssertValue

  test "simple pass" do
    actual = """
    aaa
    bbb
    """
    assert_value actual == """
    aaa
    bbb
    """
  end

  test "create expected" do
    value = """
    aaa
     bbb
      ccc
    """
    # prompt: y
    assert_value value

    # prompt: y
    assert_value "foo"
  end

  test "update expected" do
    actual = """
     3
     4
     5
    """
    # prompt: y
    assert_value actual == """
    -1
      0
       1
      2
     3
     4
     5
      6
       7
      8
     9
      0
       1
    """
  end

  test "create expected from string" do
    # prompt: y
    assert_value "foo\nbar"
  end

  test "create file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_create", __DIR__))
  end

  test "update file" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: y
    assert_value actual == File.read!(Path.expand("file_to_update", __DIR__))
  end

  test "create expected from function" do
    # prompt: y
    assert_value hello("World")
  end

  test "update expected from function" do
    # prompt: y
    assert_value hello("Elixir") == """
    Hello World!
    """
  end

  test "reprompt context" do
    actual = String.duplicate("line\n", 38)
    # prompt: y
    assert_value actual
  end

  test "expected in the form of string" do
    # prompt: y
    assert_value "foo" == "bar"
  end

  test "string escaping" do
    # prompt: y
    assert_value "foo\\nbar\" \" %{}" == "bar"
  end

  test "bad actual" do
    assert_value 42
  end

  defp hello(arg) do
    "Hello #{arg}!"
  end

  # tests with prompt answer n go below here

  test "simple fail" do
    actual = """
    aaa
    bbb
    ccc
    """
    # prompt: n
    assert_value actual == """
    aaa
    bBb
    ccc
    """
  end

end
